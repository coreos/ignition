#!/usr/bin/env bash

set -eu

echo "Checking for license headers..."
EXPECTED_HEADER='//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.'

HEADER_CHECK_FAILED=0

for file in $(find config internal validate tests -name \*.go -type f -not -name schema.go); do
    # Don't check the first line because the year will vary
    HEADER="$(head -n 13 ${file} | tail -n 12)"
    if [ "${HEADER}" != "${EXPECTED_HEADER}" ]; then
        echo "${file} is missing the Apache License header"
        HEADER_CHECK_FAILED=1
    fi
done

if [ "${HEADER_CHECK_FAILED}" -ne 0 ]; then
    exit 1
fi

source ./build

SRC=$(find . -name '*.go' -not -path "./vendor/*")

PKG=$(go list ./... | \
	grep --invert-match vendor | grep --invert-match tests)

# https://github.com/golang/go/issues/15067
PKG_VET=$(go list ./... | \
	grep --invert-match vendor | \
	grep --invert-match internal/log)

echo "Checking gofix..."
# https://github.com/coreos/ignition/issues/1950
go_version=$(go version | awk '{print $3}')
go tool fix -go="$go_version" -diff $SRC

echo "Checking gofmt..."
res=$(gofmt -d -e -s $SRC)
echo "${res}"
if [ -n "${res}" ]; then
	exit 1
fi

echo "Checking govet..."
go vet $PKG_VET

echo "Running tests..."
if [ "$GOARCH" == amd64 ]; then
	go test -timeout 60s -cover "${@}" ${PKG} --race
else
	go test -timeout 60s -cover "${@}" ${PKG}
fi

echo "Checking docs..."
go run internal/util/tools/docs/docs.go
# Ensure every platform is listed in supported-platforms.md
platforms=$(grep -A 1 -h platform.Register internal/providers/*/* | grep Name: | cut -f2 -d\")
if [ -z "${platforms}" ]; then
    echo "Found no platform IDs; update $0" >&2
    exit 1
fi
for id in ${platforms}; do
    case "${id}" in
    file) ;;  # Undocumented platform ID for testing
    *)
        if ! grep -qF "\`${id}\`" docs/supported-platforms.md; then
            echo "Undocumented platform ID: $id" >&2
            exit 1
        fi
        ;;
    esac
done

echo "Success"
