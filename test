#!/usr/bin/env bash

set -eu

echo "Checking for license headers..."
EXPECTED_HEADER='//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.'

HEADER_CHECK_FAILED=0

for file in $(find config internal validate tests -name \*.go -type f -not \( -name schema.go -o -path 'internal/earlyrand/*' \)); do
    # Don't check the first line because the year will vary
    HEADER="$(head -n 13 ${file} | tail -n 12)"
    if [ "${HEADER}" != "${EXPECTED_HEADER}" ]; then
        echo "${file} is missing the Apache License header"
        HEADER_CHECK_FAILED=1
    fi
done

if [ "${HEADER_CHECK_FAILED}" -ne 0 ]; then
    exit 1
fi

source ./build

SRC=$(find . -name '*.go' -not -path "./vendor/*")

PKG=$(cd gopath/src/${REPO_PATH}; go list ./... | \
	grep --invert-match vendor | grep --invert-match tests)

# https://github.com/golang/go/issues/15067
PKG_VET=$(cd gopath/src/${REPO_PATH}; go list ./... | \
	grep --invert-match vendor | \
	grep --invert-match internal/log)

echo "Checking gofix..."
go tool fix -diff $SRC

echo "Checking gofmt..."
res=$(gofmt -d -e -s $SRC)
echo "${res}"
if [ -n "${res}" ]; then
	exit 1
fi

echo "Checking govet..."
go vet $PKG_VET

echo "Running tests..."
go test -timeout 60s -cover $@ ${PKG} --race

echo "Checking docs..."
go run internal/util/tools/docs/docs.go

echo "Success"
