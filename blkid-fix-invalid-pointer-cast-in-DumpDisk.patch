From 34e18b247876eb9b42417ca2702b047f29670fca Mon Sep 17 00:00:00 2001
From: Benjamin Gilbert <bgilbert@redhat.com>
Date: Tue, 11 Aug 2020 08:11:58 -0400
Subject: [PATCH] blkid: fix invalid pointer cast in DumpDisk()
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

LogicalSectorSize is a Go int (64 bits on 64-bit systems) and the
argument to blkid_get_logical_sector_size() is a C int * (pointer to
32 bits).  The value fits in 32 bits and the field is initialized to
zero, so we get away with this on little-endian systems, but not on
s390x.

See also 76a71f08d3c1.

Reported-by: Jakub ÄŒajka <jcajka@redhat.com>
---
 internal/exec/util/blkid.go | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/internal/exec/util/blkid.go b/internal/exec/util/blkid.go
index 8e53e26c..3888ce54 100644
--- a/internal/exec/util/blkid.go
+++ b/internal/exec/util/blkid.go
@@ -147,10 +147,11 @@ func DumpDisk(device string) (DiskInfo, error) {
 	cDevice := C.CString(device)
 	defer C.free(unsafe.Pointer(cDevice))
 
-	cSectorSizeRef := (*C.int)(unsafe.Pointer(&output.LogicalSectorSize))
-	if err := cResultToErr(C.blkid_get_logical_sector_size(cDevice, cSectorSizeRef), device); err != nil {
+	var sectorSize C.int
+	if err := cResultToErr(C.blkid_get_logical_sector_size(cDevice, &sectorSize), device); err != nil {
 		return DiskInfo{}, err
 	}
+	output.LogicalSectorSize = int(sectorSize)
 
 	numParts := C.int(0)
 	cNumPartsRef := (*C.int)(unsafe.Pointer(&numParts))
-- 
2.25.4

